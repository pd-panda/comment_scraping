# -*- coding: utf-8 -*-
"""class_graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sERnnLoxarEURBrFsK885u9j1W9aAWLH
"""

import pandas as pd
import datetime
import os
import shutil


from kivy.uix.boxlayout import BoxLayout

# matplotlib組み込み
import numpy as np
import matplotlib
matplotlib.use('module://kivy.garden.matplotlib.backend_kivy')
import matplotlib.pyplot as plt
plt.style.use('ggplot')
import sys

class GraphView(BoxLayout):
    def __init__(self, **kwargs):
        super(GraphView, self).__init__(orientation='vertical')
        self.add_widget(self.graph_plot_sample())

    def graph_plot_sample(self):
        self.fig= self.df_glaph(self.csv_df("data1.csv"))
        return self.fig.canvas
    
    #csvファイルをデータフレームに変換
    def csv_df(self,fname):
        df = pd.read_csv(fname)
        return df

    #時間と分を分ける
    def minute(self,time):
        tmp =[]
        for row in time :
            tmp = tmp + row.split(':')
        return tmp

    #グラフ用データの作成
    def make_data(self, time):
        time2 = self.minute(time)
        num =[]
        c=0
        i=0
        label = [time[0]]
        tmp = int(time2[1]);
    #使うのは分の部分　同じ数字だったら加算し，変わったらリセット&ラベル名追加
        for row in time2[1::2]:
            row = int(row)
            if row == tmp : 
                c+=1
            else : 
                num.append(c)
                label.append(str(time[i]))
                c=1
                tmp = row
                i+=2
        num.append(c)
        return num,label

    #グラフ描画
    def print_glaph(self,num,label):
        fig = plt.figure()
        ax = fig.add_subplot(1, 1, 1)
 
        ax.set_xticks(range(0,len(label)))
        ax.set_xticklabels(label,
                   rotation=30, fontsize='small')
        ax.plot(num, color='#FF4500', marker='o', linewidth='5')
        return fig

    #現在時間の取得
    def get_current_time(self):
        dt_now = datetime.datetime.now()
        return str(dt_now)

    #データフレームからグラフの作成
    def df_glaph(self, df) :
        time = df['time']

    #グラフ用データ作成
        result =  self.make_data(time)

    #グラフ表示部分
        fig = self.print_glaph(result[0],result[1])

    #現在時間のからファイル名作成
        #pngname = self.get_current_time() +'.png'
        #fig.savefig(pngname)
        return fig

    #csvファイルを直下ディレクトリにコピー
    def copy_csv(path):
        files = os.listdir(path)
    #path内にあるファイルすべて取得
        files_file = [f for f in files if os.path.isfile(os.path.join(path, f))]
        for row in files_file:
            if row[-3:] == 'csv': 
                shutil.copyfile(path + '/' + row, "./"+row)

    #直下ディレクトリ内のcsvファイルからグラフを作成&csvファイルの削除
    def make_glaph():
        path = '.'
        files = os.listdir(path)
    #path内にあるファイルすべて取得
        files_file = [f for f in files if os.path.isfile(os.path.join(path, f))]
        for row in files_file:
            if row[-3:] == 'csv': 
            #csvをデータフレーム型に
                df = csv_df(row)
            
            #データフレーム型からグラフを作成直下ディレクトリに保存
                df_glaph(df)
            
            #使い終わったcsvファイルの削除
                os.remove(row)

    #pngファイルを指定の位置に移動 
    def move_png(path_out):
        path = '.'
        files = os.listdir(path)
        files_file = [f for f in files if os.path.isfile(os.path.join(path, f))]
        for row in files_file:
            if row[-3:] == 'png': 
                shutil.move(row, path_out)

    #path_in csvファイルのあるところ
    #path_out グラフ(png)の置くディレクトリー
    def main(path_in,path_out) :
    #csvファイルを直下にコピー
        copy_csv(path_in)

    #直下にグラフ作成(使い終わってcsvファイルの削除)
        make_glaph()

    #指定のファイルにpngデータを移動
        move_png(path_out)

